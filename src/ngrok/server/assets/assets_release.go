// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\xc9\xce\xb2\x48\x14\x86\xf7\x5c\x45\xef\x4d\x47\x66\x75\xd1\x8b\xa2\x8a\x79\x50\xa0\x18\x77\x02\x02\x0a\x82\xcc\xc3\xd5\xb7\xdf\x9f\xf4\xea\x4b\xd7\xf2\x49\xe5\xc9\xc9\x79\xcf\xfb\xf7\xcf\x13\x44\x59\xb5\xfe\x82\xa2\x83\x55\x49\x85\x00\x8b\x7f\x28\x61\xaa\x2a\x1c\x5f\x10\x82\x98\x85\xd0\x86\xf7\x8e\x54\xf0\xdc\x97\x46\x86\x80\x25\x14\x55\x57\x56\x4f\xf9\xb2\x90\x02\xb0\x07\x09\x20\x90\x99\xce\xb0\xc8\x76\x84\x7c\xdb\x46\x48\xd0\x26\x22\x66\xb4\xf9\xbe\x71\x43\x16\x58\xfd\x23\x74\xca\x64\xe3\xa6\x38\xb4\x17\xa5\x4c\x2d\x13\x57\x8b\x89\x45\xd6\x44\x1e\x65\xed\x1e\x13\xfc\xb0\x5d\x5d\xae\x58\xa5\xff\x63\x44\xf0\xfa\x6d\xfd\x3f\x69\x51\x88\x4f\x13\x90\x32\x74\x3b\xd9\x55\x13\x06\xd9\xa2\x40\x00\xdb\x03\x80\x55\x05\xb4\x80\x9f\x0f\x3a\x68\xd5\xef\xb8\x70\x7f\x71\xd4\x72\x66\xae\x51\x65\xf4\x37\x6a\x04\x5c\xbe\xef\x3e\x7f\x84\x8f\x99\xf5\x02\x7e\xbb\x72\x3a\xc3\x7b\xa2\x91\xec\x44\xf5\x86\xe7\x66\x7b\x7d\x86\xea\xe9\xca\x91\xcc\x7c\xc2\x63\xd2\x67\xb5\xf1\xd4\xad\x69\x32\xb6\x53\xb4\xb3\xf6\x5b\xb7\x0e\xb7\x5b\x56\x5e\xe4\x60\xa2\xd7\x94\x4b\xb0\x9f\x51\xfd\x1d\x33\x0a\x23\x12\x9d\x66\xb6\xc7\xf7\xe8\xf2\x33\x53\x31\x85\x86\xe2\xad\x13\xe6\x50\xe5\x49\xb7\x07\xe8\x24\x19\xc8\x8b\xa0\x8c\xfd\xf6\xd6\xc1\xba\xbe\xe5\xe6\x2d\xb6\x93\x6a\x19\xbb\x2c\x4c\x8b\xe7\x88\x6b\xa2\xf4\x7c\xbf\x77\xa4\xda\xcf\xb6\x3c\xb8\xd2\x38\x5e\x3f\xdf\x45\xe4\xe6\x5c\x14\x8f\xf9\x12\xb8\x72\x29\x92\xcf\xa4\xde\x78\x28\x51\x58\x2c\xfd\x7d\xe6\xe5\xea\x55\x8a\x8d\x77\x6e\x52\x30\x1a\x44\x67\x25\x75\xed\xe4\x6e\xef\xaf\x81\x7e\x75\xb6\xb4\xe9\x2e\x8f\xe6\x70\x90\x34\x79\x77\xbe\xa6\xba\x60\x73\xe3\xcc\xf2\x7d\xb7\xf4\x69\x49\x0e\x4f\x79\x03\x74\xb0\x5d\x65\xf8\xe2\x6a\x07\xf6\xc4\xca\xfb\xdd\x9b\xdc\x15\x64\x89\xb0\x7e\x05\xfe\xe1\x45\x49\x6d\xce\xf6\x7b\x5b\xd1\xb8\xcd\x0b\x6c\x2c\x24\x32\x3f\x49\x84\x3e\x08\x14\xa6\x00\x80\xb8\x20\x3b\xd2\xf4\x36\x56\xcb\x39\xb5\xbe\x29\x88\x86\x60\x03\xf4\x4d\x40\xf8\x1e\x4a\x43\x09\xf3\x53\x65\xa2\x88\x59\x87\x53\x25\x80\xbc\x1b\x69\x3d\x88\xac\x4b\xd1\xd0\x54\xd3\x53\xe1\x05\x2e\xf7\xc9\x62\x9d\xe6\x6d\x0c\xa7\xc4\x3c\x10\x17\x3c\x28\xb1\x57\x09\xbe\x66\xba\x8b\xdf\xee\xf7\xa3\x32\x79\x93\x39\xf4\x1f\xc3\x5e\xad\x3e\xf5\xce\x86\xfb\xb4\xe8\x99\x59\x6e\x17\x5d\xba\x43\xa5\xbc\x02\x7c\x49\x4c\xe9\xf0\xfc\x70\x7c\xca\x11\xce\x20\xc5\x72\xe4\xbc\x33\xf3\xa1\xdf\xb9\xa1\x5c\x69\x6a\xc8\x19\x36\x6d\x42\xd9\x5a\xed\xbb\x00\x3c\x83\x23\xcb\xa3\x6b\x23\x05\x1b\x0e\xe7\x4f\x06\xab\xb0\x97\x43\xd5\x8d\x96\x71\x6d\x9d\x13\xe1\x74\x45\x78\x5a\xfa\x62\x91\x59\x67\x47\x1f\xda\xfe\xd4\x95\xd6\x3d\x9c\xdc\x6c\x6d\x03\x33\xaf\x30\xd7\x8f\x4e\xb9\x8f\xf7\x8a\xe2\xfc\x0f\x1d\x57\x19\xd0\x8e\xc1\x9d\x3d\x9d\xc3\xea\xc4\x6b\x88\x48\x76\x2d\x14\x9d\x91\x36\xad\xd2\xd3\xb7\x99\x8a\x83\x49\x22\xa5\xbc\x59\xc5\x1c\x16\x92\x4a\x5b\x41\xca\x9f\x73\xd7\xde\x1b\x37\xd1\x93\x54\xbc\xae\x14\x9b\x4d\x93\xa4\xe8\x07\x4d\x1e\xe9\x84\xe0\x30\xe2\x48\x76\xe7\x0c\xe6\x28\xb5\x6e\x5a\x9f\xf4\x88\x9b\xb0\xd2\x9d\xfd\x78\xe6\x8e\x28\xe2\x82\xf4\x1f\xe2\x4f\x71\x45\x0b\xfd\x2e\xf3\xbf\x01\x00\x00\xff\xff\x8b\x4d\x84\xf3\xe9\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 1001, mode: os.FileMode(436), modTime: time.Unix(1547791117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x0e\xb3\xda\x16\x84\x7b\x9e\xe2\xef\xd1\x15\x39\x15\xb7\x20\x99\x64\x63\x32\x6c\x77\xe4\x1c\x4c\x86\xa7\x3f\x3e\x7f\x7d\x76\xbb\xd7\x92\x46\xa3\x6f\xd6\xfc\xef\xdf\x27\xc8\x8a\x66\xfe\x71\x5c\xfe\x8f\xe5\x68\x01\xef\xc9\x7f\x0c\x19\xfc\xfd\x81\x5e\x9a\x26\x8f\xa5\x26\xf0\xbc\x21\xf2\xb6\xcc\x2f\x24\x9c\xa5\x96\x79\xf7\xba\x48\xdf\x5c\x62\xbf\x23\x96\xc5\xf2\xfd\x18\x66\xf8\xf1\xd8\x96\x66\x73\x57\xb8\x13\x44\x9c\xa5\xf4\x72\xd7\xd9\x11\xa2\x13\x5d\x6b\xab\x5e\x58\xe9\x00\xc1\x69\xe2\xe3\x92\x75\x93\xcc\x35\xbb\xe1\x2f\x58\xd6\xeb\xa6\x68\x6e\x02\x14\x4e\x37\xaf\x4b\xf4\x0e\x51\x2c\xca\x62\xbc\xe5\x4e\xee\x34\x6a\xcf\xb0\xa8\x19\xf2\xb7\x99\xa3\x4c\x52\xb4\xf1\xf4\x5b\x26\xd8\xf5\x5e\xe5\xef\xc1\xc3\xa7\x7b\x60\x0a\x5f\xb5\x58\x2c\xd1\xe5\xf4\xf1\x88\x5b\xc2\x7d\x85\x7a\x3d\xe3\x21\x20\x34\x6d\xf6\x29\x10\x3c\x82\x18\x75\xa0\x4f\x10\xa5\x03\xd6\xac\x2d\x9e\xc6\x3e\x7f\x10\xf7\x93\xd4\xd4\x19\x09\xda\x6a\x74\x4c\xad\xa7\xd2\xad\xac\x32\xff\xd4\x82\x94\x81\xab\x49\x23\x1d\x1d\xb3\x74\x82\x7f\xba\x74\x13\x52\x1f\x3f\x82\xd0\x2f\x96\x06\x75\xd3\xa6\x83\x4e\xef\xd1\x84\xec\x95\xeb\x2c\xa8\x7d\x10\x14\x78\xab\x17\xf2\x7e\x7f\xe9\xc5\x20\xb4\xec\xa9\x55\x4b\x69\x76\x4b\x53\x95\x23\xfc\xf1\xed\x2f\x9b\x77\xf1\xb4\xbe\xa0\xf3\xb8\x1d\x7e\x02\x58\x57\x8c\x9c\x13\xab\xb0\xc1\xd2\xba\xd9\xd2\x2a\x29\x5f\xac\xc9\xdf\x46\x88\xf3\xb4\x7d\x68\x12\x6f\xf3\x02\x3f\xfe\xcc\xb6\x45\x55\xe8\x08\xd6\x45\x80\x6a\x14\xd4\x01\x1d\x52\xcc\x4f\x15\x1c\x99\x05\xeb\xd8\x2e\xe2\x74\xf5\x95\xe2\xfc\xb8\xba\xe0\xfc\x8a\x36\xf3\xa9\x65\x82\xda\xfb\x96\x14\x84\x91\x2a\xdd\x6a\xab\x48\x83\x2a\x84\x93\x62\x64\xec\x78\x88\x49\x06\xa1\xfc\xe4\x7c\xc1\x33\xe8\x24\xcf\x68\x3b\x2d\xae\xf7\xe4\x28\x19\xee\x26\x6c\x61\x0b\x39\x3c\x1b\x78\xdb\x9f\x65\xdf\xf7\x68\x50\x4a\xd1\x48\xc4\xa9\x80\x47\x6d\x31\xe5\xa1\x89\x33\xd3\x64\x43\x55\x5c\x05\xd3\xc7\x68\x5f\xee\x6a\xe2\x7a\x2d\xb8\x6c\xb1\x13\x52\x5b\xcf\xc0\x84\x37\x86\x0b\x33\xb9\x16\xca\x2e\x79\x27\xad\xa0\x4f\x18\xd7\x0d\xdf\xad\xcc\x64\x21\x61\x19\x58\xd5\x89\x58\x86\xfc\x32\x2e\x10\xb3\xb9\x90\x64\xb8\xde\x8c\xfa\x1e\xdd\x17\x2c\xd5\x25\x52\x8c\x61\x7c\x4a\x57\xb7\xd3\x8f\x00\xe6\x53\x6d\x59\x4e\x5b\x1f\x4d\x29\x75\xdb\x0b\x91\x86\xb4\xc0\xb8\x36\xdd\xa8\x05\x22\xee\x91\x5a\xd3\x2f\x8b\x21\x08\xed\xe7\x11\x00\x2a\x7b\x67\xd5\x2e\xa3\x66\x08\xc4\xa5\x47\xe9\x36\x92\x08\xa5\x03\xc5\xeb\xc4\x69\x23\xa8\x9e\xb7\x34\xa7\x9a\x21\xe4\x05\xdf\xcf\x9f\x18\x40\x93\xe5\x53\x24\x0f\xff\x1c\x56\x04\xfe\xdd\xf9\x0c\x66\x30\x29\x1e\x17\xeb\x37\x65\x13\x9b\x6d\x1a\x2c\xa6\x93\xc1\x5b\x58\x40\x27\xbf\x7d\xd6\x80\x53\x1e\xb9\xe5\xee\xb0\x92\x7a\x7d\x7b\x28\x84\x38\xb2\x27\x32\x31\xb3\x13\xd7\x7e\x3d\x1f\xaf\x20\xd8\x88\xcd\x82\x4b\x75\xff\xc4\x96\x58\x8b\x75\xe6\x70\x79\x1f\x31\x91\x4b\xbf\x34\xcb\xe7\xa9\x6c\x42\xb0\x9d\xe9\xf3\x03\x54\xdb\x0b\x3e\x20\x6a\xb0\x07\x12\xcb\x55\xa4\x81\xbf\x51\xf8\xec\x44\xc3\x6b\xef\x3c\x2f\xe0\x4a\xb2\x0e\x47\x76\x1e\xd7\x71\x35\x49\x95\xf4\xb3\x2e\x88\x32\x72\xf7\x4a\xf9\x45\xef\xa8\xfa\xab\xf8\xe5\x0b\x10\x50\x2f\x85\xb5\xa8\xa1\x73\x3f\x32\x1a\x05\xfc\xac\xba\xea\xb8\x27\x8c\x97\xd8\x4f\xd2\x6b\xd8\x3c\xfe\x44\x87\x01\xf7\xa6\x63\x00\x10\xc4\x99\x3e\x8f\x15\xda\xdb\x2d\x59\xbf\xdd\xd1\x6f\x4e\x28\xe8\x4d\xd7\x71\xb2\x2a\x34\xdd\xd1\x60\x7e\x5e\x60\xaf\x4f\x12\x81\x13\x17\xd5\x12\x21\x60\x0f\x17\x33\x27\x50\x70\x9d\xc1\x2b\xc6\xea\x94\x3a\x47\x92\xc2\x65\x05\x65\x4a\x65\x49\x46\x17\x17\xc2\x1f\x68\xba\xa4\xee\xc2\xec\x00\x90\xbd\x35\xad\xf8\x7b\x4c\xe5\xf5\x02\xb9\xa0\xbe\x8f\xcd\xe9\x31\xcc\x8c\xfb\xab\xf9\x49\xe6\x81\xfe\x8b\xfc\x6f\x7c\x4a\x3e\x0a\xe3\x3f\x73\xbe\x20\x61\xc8\xba\x79\x76\x7b\xf6\x0c\xc9\x5a\x7d\x19\x69\x2d\x5e\xeb\x51\xc9\xd7\x60\xa6\x3a\xd2\xa4\x49\x27\x3d\x8b\xc1\x08\xbd\x5c\x58\x92\x14\x93\x53\x76\xae\x0c\xe5\x02\xbd\xe2\x90\x66\xdd\x92\x1a\x06\xe5\x44\x11\xb8\x93\x12\x1b\x2f\x7d\x2c\x4b\x0d\xd3\x4e\x8f\x60\xb3\xed\x41\xba\x7b\xeb\x3d\x1c\xac\x55\x38\x37\xe5\xe4\xc2\xf4\x57\x20\x19\xf0\xb9\xcb\xc8\xe7\xa2\x58\x94\x46\x44\xaf\x1c\x7c\x0d\xea\xc7\xf9\x6a\xf6\x30\x7d\x63\x68\x29\x32\x95\x73\x96\x17\x2a\xdb\xb2\x58\x82\xdf\x79\xd3\x45\x3e\x1c\x56\xf7\x6b\x08\xcf\x92\x8d\x76\x58\xc9\x9b\xf8\xd9\x25\x8c\xa6\xb6\x4c\x04\x16\x5b\x2a\x78\x48\x64\x98\x32\x6c\xef\xa4\x6e\x2c\x5a\x8b\xf2\xb5\xde\xe6\xc2\x9c\x2c\x06\x89\x8b\x32\xa0\x44\xce\xf2\xd0\x93\xf4\xf2\x87\xb9\x2d\x61\x3a\x66\xdc\xe7\xc1\x6b\x18\xff\xdc\x7c\x36\xe9\x1e\xc7\x83\x82\x06\x61\x45\xfc\xd7\x63\x71\x93\xd4\xfb\x11\x77\xeb\xd4\xd7\xda\x4c\x0e\x74\x51\x97\xe9\x32\x13\x37\x85\x8c\xef\x35\x22\x51\xdc\xcc\x4c\x0f\x43\x21\x29\x55\x79\xa3\x55\x73\xf4\x08\x8a\x0e\xae\x06\x5d\xa4\xd2\x10\xe0\x25\x16\x84\x69\x59\x12\xce\x25\xa8\x55\x1e\xa9\x1e\x2e\x81\x90\xd6\x6c\xaf\x7f\xd2\x1f\x23\xcf\x6f\x26\x80\xf8\xe9\x7b\xea\x1d\x52\x2a\xce\xd0\x53\x88\x63\xdb\x5b\x1a\xd4\x03\x22\x50\x66\xe5\x7e\xd9\x42\xcd\x2d\x28\x95\x8e\x3e\x43\xa0\x73\xde\x83\xe2\x16\x4e\xb2\x4d\x85\x7b\x61\x36\xeb\x30\x21\xeb\x67\x6b\xbf\x46\x1a\xb5\xfd\x28\xc9\x10\xf8\x78\xb3\xe4\x6a\x1b\xab\x09\x6d\xa4\x32\xc4\x4a\x19\x7a\x47\x4b\x48\x0a\xa8\xb0\xe8\x79\x6f\xde\x67\xd7\x8d\xab\x5b\x3b\xdf\xa9\x8c\xc1\xdf\xbf\x00\x2e\x9c\xd1\xb4\xa8\x06\x5f\x62\xf9\xff\xd0\xdf\x4a\x91\x4d\xe9\xbf\xab\xe6\x9f\x00\x00\x00\xff\xff\xa9\x65\xe5\x39\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(436), modTime: time.Unix(1547791121, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

